weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
data_test = CBF[["data_test"]]
for (i in 1:length(labels_predicted)) {
labels_test_predicted  =labels_predicted[i]
sample = data_test[i,]
sample_bag = sax_via_window(sample, w, p, a, "exact", 0.01)
df = data.frame(index = as.numeric(names(sample_bag)), words = unlist(sample_bag))
weighted_patterns = merge(df, tfidf)
specificity = rep(0, length(sample))
for(i in 1:length(weighted_patterns$words)){
pattern = weighted_patterns[i,]
if (labels_test_predicted == 1){x = pattern$class1}
if (labels_test_predicted == 2){x = pattern$class2}
if (labels_test_predicted == 3){x = pattern$class3}
for(j in 1:w){
specificity[pattern$index+j] = specificity[pattern$index+j] + 2*x
-pattern$class1 - pattern$class2 - pattern$class3
}
}
specificity = as.vector(specificity)
weights = rbind(weights, specificity)
}
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
i = 13
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] )
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] )
labels_test = CBF[["labels_test"]]
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] )
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
write.table(weights,"test_weights_saxvsm_cbf.txt",sep=",",row.names=FALSE, col.names = FALSE)
setwd("~/Google Drive/github/code/output")
write.table(weights,"test_weights_saxvsm_cbf.txt",sep=",",row.names=FALSE, col.names = FALSE)
write.table(weights,"weightsSAXVSM_CBF.txt",sep=",",row.names=FALSE, col.names = FALSE)
rm(list = ls())
library(jmotif)
library(ggplot2)
library(scales)
data("Gun_PointF")
str(Gun_Point)
w <- 60 # the sliding window size
p <- 6  # the PAA size
a <- 6  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has three labels: 1, 2, 3)
#
class1 <- manyseries_to_wordbag(CBF[["data_train"]][CBF[["labels_train"]] == 1,], w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(CBF[["data_train"]][CBF[["labels_train"]] == 2,], w, p, a, "exact", 0.01)
class3 <- manyseries_to_wordbag(CBF[["data_train"]][CBF[["labels_train"]] == 3,], w, p, a, "exact", 0.01)
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
plot(data_test[1])
plot(data_test[1,])
unique(labels_test)
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] )
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
w <- 33 # the sliding window size
p <- 10  # the PAA size
a <- 10  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has Two labels: 1, 2)
#
class1 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 1,], w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 2,], w, p, a, "exact", 0.01)
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(series, w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
data_test = Gun_Point[["data_test"]]
for (i in 1:length(labels_predicted)) {
labels_test_predicted  =labels_predicted[i]
sample = data_test[i,]
sample_bag = sax_via_window(sample, w, p, a, "exact", 0.01)
df = data.frame(index = as.numeric(names(sample_bag)), words = unlist(sample_bag))
weighted_patterns = merge(df, tfidf)
specificity = rep(0, length(sample))
for(i in 1:length(weighted_patterns$words)){
pattern = weighted_patterns[i,]
if (labels_test_predicted == 1){x = pattern$class1}
if (labels_test_predicted == 2){x = pattern$class2}
for(j in 1:w){
specificity[pattern$index+j] = specificity[pattern$index+j] + 2*x
-pattern$class1 - pattern$class2
}
}
specificity = as.vector(specificity)
weights = rbind(weights, specificity)
}
#write.table(weights,"weightsSAXVSM_GunPoint.txt",sep=",",row.names=FALSE, col.names = FALSE)
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 13
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
rm(list = ls())
library(jmotif)
library(ggplot2)
library(scales)
data("Gun_PointF")
str(Gun_Point)
w <- 33 # the sliding window size
p <- 10  # the PAA size
a <- 10  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has Two labels: 1, 2)
#
class1 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 1,], w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 2,], w, p, a, "exact", 0.01)
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(series, w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
rm(list = ls())
library(jmotif)
library(ggplot2)
library(scales)
data("Gun_PointF")
str(Gun_Point)
w <- 33 # the sliding window size
p <- 10  # the PAA size
a <- 10  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has Two labels: 1, 2)
#
class1 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 1,], w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 2,], w, p, a, "exact", 0.01)
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
# comp
tfidf = bags_to_tfidf( list("class1" = class1, "class2" = class2, "class3" = class3) )
# predicted labels
#
labels_predicted = rep(-1, length(CBF[["labels_test"]]))
data_test = CBF[["data_test"]]
labels_test = CBF[["labels_test"]]
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(series, w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
# compute tf*idf weights for three bags
#
tfidf = bags_to_tfidf( list("class1" = class1, "class2" = class2, "class3" = class3) )
# compute tf*idf weights for three bags
#
tfidf = bags_to_tfidf( list("class1" = class1, "class2" = class2) )
labels_predicted = rep(-1, length(Gun_Point[["labels_test"]]))
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(series, w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
data_test = Gun_Point[["data_test"]]
true_class = as.numeric(labels_test) # fix the labeling differences
confusionMatrix(as.factor(labels_predicted),as.factor(true_class))
rm(list = ls())
library(jmotif)
library(ggplot2)
library(scales)
data("Gun_PointF")
str(Gun_Point)
w <- 33 # the sliding window size
p <- 10  # the PAA size
a <- 6  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has Two labels: 1, 2)
#
class1 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 1,], w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 2,], w, p, a, "exact", 0.01)
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
# compute tf*idf weights for three bags
#
tfidf = bags_to_tfidf( list("class1" = class1, "class2" = class2) )
# predicted labels
#
labels_predicted = rep(-1, length(Gun_Point[["labels_test"]]))
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(series, w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
true_class = as.numeric(labels_test) # fix the labeling differences
confusionMatrix(as.factor(labels_predicted),as.factor(true_class))
weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
data_test = Gun_Point[["data_test"]]
for (i in 1:length(labels_predicted)) {
labels_test_predicted  =labels_predicted[i]
sample = data_test[i,]
sample_bag = sax_via_window(sample, w, p, a, "exact", 0.01)
df = data.frame(index = as.numeric(names(sample_bag)), words = unlist(sample_bag))
weighted_patterns = merge(df, tfidf)
specificity = rep(0, length(sample))
for(i in 1:length(weighted_patterns$words)){
pattern = weighted_patterns[i,]
if (labels_test_predicted == 1){x = pattern$class1}
if (labels_test_predicted == 2){x = pattern$class2}
for(j in 1:w){
specificity[pattern$index+j] = specificity[pattern$index+j] + 2*x
-pattern$class1 - pattern$class2
}
}
specificity = as.vector(specificity)
weights = rbind(weights, specificity)
}
i = 13
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] )
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 13
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 1
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 2
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 3
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 4
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 5
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
setwd("~/Google Drive/github/data/Gun_Point/")
train = read.table("Gun_Point_TRAIN", sep =",", header = FALSE, dec =".")
test = read.table("Gun_Point_TEST", sep =",", header = FALSE, dec =".")
View(train)
setwd("~/Google Drive/github/data/Gun_Point/")
train = read.table("Gun_Point_TRAIN", sep =" ", header = FALSE, dec =".")
test = read.table("Gun_Point_TEST", sep =" ", header = FALSE, dec =".")
? read.table
setwd("~/Google Drive/github/data/Gun_Point/")
train = read.table("Gun_Point_TRAIN", sep ="\t", header = FALSE, dec =".")
test = read.table("Gun_Point_TEST", sep ="\t", header = FALSE, dec =".")
View(test)
View(train)
View(weights)
write.table(weights,"weightsSAXVSM_GunPoint.txt",sep=",",row.names=FALSE, col.names = FALSE)
data("Gun_PointF")
str(Gun_Point)
w <- 33 # the sliding window size
p <- 10  # the PAA size
a <- 6  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has Two labels: 1, 2)
#
class1 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 1,], w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 2,], w, p, a, "exact", 0.01)
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
# co
tfidf = bags_to_tfidf( list("class1" = class1, "class2" = class2) )
# predicted labels
#
labels_predicted = rep(-1, length(Gun_Point[["labels_test"]]))
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(series, w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
true_class = as.numeric(labels_test) # fix the labeling differences
confusionMatrix(as.factor(labels_predicted),as.factor(true_class))
rm(list = ls())
library(jmotif)
library(ggplot2)
library(scales)
data("Gun_PointF")
str(Gun_Point)
w <- 33 # the sliding window size
p <- 10  # the PAA size
a <- 6  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has Two labels: 1, 2)
#
class1 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 1,], w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(Gun_Point[["data_train"]][Gun_Point[["labels_train"]] == 2,], w, p, a, "exact", 0.01)
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
# compute tf*idf weights for three bags
#
tfidf = bags_to_tfidf( list("class1" = class1, "class2" = class2) )
# predicted labels
#
labels_predicted = rep(-1, length(Gun_Point[["labels_test"]]))
data_test = Gun_Point[["data_test"]]
labels_test = Gun_Point[["labels_test"]]
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(series, w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
true_class = as.numeric(labels_test) # fix the labeling differences
confusionMatrix(as.factor(labels_predicted),as.factor(true_class))
weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
data_test = Gun_Point[["data_test"]]
for (i in 1:length(labels_predicted)) {
labels_test_predicted  =labels_predicted[i]
sample = data_test[i,]
sample_bag = sax_via_window(sample, w, p, a, "exact", 0.01)
df = data.frame(index = as.numeric(names(sample_bag)), words = unlist(sample_bag))
weighted_patterns = merge(df, tfidf)
specificity = rep(0, length(sample))
for(i in 1:length(weighted_patterns$words)){
pattern = weighted_patterns[i,]
if (labels_test_predicted == 1){x = pattern$class1}
if (labels_test_predicted == 2){x = pattern$class2}
for(j in 1:w){
specificity[pattern$index+j] = specificity[pattern$index+j] + 2*x
-pattern$class1 - pattern$class2
}
}
specificity = as.vector(specificity)
weights = rbind(weights, specificity)
}
write.table(weights,"weightsSAXVSM_GunPoint.txt",sep=",",row.names=FALSE, col.names = FALSE)
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 5
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
View(weights)
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] )
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 5
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
specificity = unlist(weights[i,], use.names = FALSE)
plot(specificity)
View(weights)
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 10
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
specificity = unlist(weights[i,], use.names = FALSE)
plot(specificity)
data("CBF")
str(CBF)
w <- 60 # the sliding window size
p <- 6  # the PAA size
a <- 6  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has three labels: 1, 2, 3)
#
class1 <- manyseries_to_wordbag(CBF[["data_train"]][CBF[["labels_train"]] == 1,], w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(CBF[["data_train"]][CBF[["labels_train"]] == 2,], w, p, a, "exact", 0.01)
class3 <- manyseries_to_wordbag(CBF[["data_train"]][CBF[["labels_train"]] == 3,], w, p, a, "exact", 0.01)
# compute tf*idf weights for three bags
#
tfidf = bags_to_tfidf( list("class1" = class1, "class2" = class2, "class3" = class3) )
# predicted labels
#
labels_predicted = rep(-1, length(CBF[["labels_test"]]))
data_test = CBF[["data_test"]]
labels_test = CBF[["labels_test"]]
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(series, w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
# calculate weights for the test time series
#
weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
data_test = CBF[["data_test"]]
for (i in 1:length(labels_predicted)) {
labels_test_predicted  =labels_predicted[i]
sample = data_test[i,]
sample_bag = sax_via_window(sample, w, p, a, "exact", 0.01)
df = data.frame(index = as.numeric(names(sample_bag)), words = unlist(sample_bag))
weighted_patterns = merge(df, tfidf)
specificity = rep(0, length(sample))
for(i in 1:length(weighted_patterns$words)){
pattern = weighted_patterns[i,]
if (labels_test_predicted == 1){x = pattern$class1}
if (labels_test_predicted == 2){x = pattern$class2}
if (labels_test_predicted == 3){x = pattern$class3}
for(j in 1:w){
specificity[pattern$index+j] = specificity[pattern$index+j] + 2*x
-pattern$class1 - pattern$class2 - pattern$class3
}
}
specificity = as.vector(specificity)
weights = rbind(weights, specificity)
}
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 10
specificity = unlist(weights[i,], use.names = FALSE)
plot(specificity)
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 11
specificity = unlist(weights[i,], use.names = FALSE)
plot(specificity)
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 15
specificity = unlist(weights[i,], use.names = FALSE)
plot(specificity)
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 17
specificity = unlist(weights[i,], use.names = FALSE)
plot(specificity)
View(sample_bag)
View(sample_bag)
