print(labels_predicted[i] == labels_test[i] + 1)
print(labels_test[i] + 1)
if (predicted_class == 1) {title_text = "The Class 0 class-characteristic pattern example"}
if (predicted_class == 2) {title_text = "The Class 1 class-characteristic pattern example"}
if (predicted_class == 3) {title_text = "The Class 2 class-characteristic pattern example"}
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
# plot the weighted patterns
#
i = 1
print(labels_predicted[i] == labels_test[i]+1) #check if predicted label == true label
saxvsm_plot(weights, labels_predicted, i)
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
print(labels_predicted[i] == labels_test[i] + 1)
print(labels_test[i] + 1)
predicted_class = labels_predicted[i]
if (predicted_class == 1) {title_text = "The Class 0 class-characteristic pattern example"}
if (predicted_class == 2) {title_text = "The Class 1 class-characteristic pattern example"}
if (predicted_class == 3) {title_text = "The Class 2 class-characteristic pattern example"}
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
saxvsm_plot(weights, labels_predicted, i)
# plot the weighted patterns
#
i = 100
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
for (i in 1:length(labels_predicted)) {
if (labels_predicted[i] != (labels_test[i]+1)) {
print(i)
print(labels_predicted[i])
print((labels_test[i]+1))
print('----')
}
}
# plot the weighted patterns
#
i = 99
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
#
i = 100
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
labels_predicted[i]
# plot the weighted patterns
#
i = 156
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
#
i = 155
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
#print(labels_predicted[i] == labels_test[i] + 1)
print(labels_test[i] + 1)
predicted_class = labels_predicted[i]
title_text = paste('Class', predicted_class, 'class-characteristic pattern', 'True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
#print(labels_predicted[i] == labels_test[i] + 1)
print(labels_test[i] + 1)
predicted_class = labels_predicted[i]
title_text = paste('Class', predicted_class, ' pattern', '; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
#print(labels_predicted[i] == labels_test[i] + 1)
print(labels_test[i] + 1)
predicted_class = labels_predicted[i]
title_text = paste('Pattern of Predicted Class', predicted_class, ; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
#print(labels_predicted[i] == labels_test[i] + 1)
print(labels_test[i] + 1)
predicted_class = labels_predicted[i]
title_text = paste('Pattern of Predicted Class', predicted_class,  '; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
#print(labels_predicted[i] == labels_test[i] + 1)
print(labels_test[i] + 1)
predicted_class = labels_predicted[i]
title_text = paste('Pattern of Predicted Class', predicted_class,'; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', predicted_class,'; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
#
i = 156
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
#
i = 154
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
#
i = 154
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
#
i = 155
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
#
i = 10
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
plot(weights[101])
weights[101;]
weights
View(weights)
weights[101,]
plot(weights[101,])
View(weights)
# plot the weighted patterns
#
i = 101
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
# plot the weighted patterns
#
i = 101
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
# plot the weighted patterns
#
i = 100
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
View(weights)
rm(list = ls())
library(jmotif)
library(caret)
setwd("~/Google Drive/github/data/CMJ/JumpResampled")
train = read.table("JumpResampled_TRAIN", sep =",", header = FALSE, dec =".")
test = read.table("JumpResampled_TEST", sep =",", header = FALSE, dec =".")
labels_train = train[,1];  labels_test = test[,1]
data_train = train[,2:501]; data_test = test[,2:501]
# window 348, PAA 8, alphabet 6,
w <- 348 # the sliding window size
p <- 8  # the PAA size
a <- 6  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has three labels: 1, 2, 3)
#
class1 <- manyseries_to_wordbag(as.matrix(data_train[labels_train == 0,]), w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(as.matrix(data_train[labels_train == 1,]), w, p, a, "exact", 0.01)
class3 <- manyseries_to_wordbag(as.matrix(data_train[labels_train == 2,]), w, p, a, "exact", 0.01)
# compute tf*idf weights for three bags
#
tfidf = bags_to_tfidf(list("class1" = class1, "class2" = class2, "class3" = class3))
# predicted labels
#
labels_predicted = rep(-1, length(labels_test))
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(as.matrix(series), w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
# check prediction accuracy: 0.9553
#
true_class = as.numeric(labels_test+1) # fix the labeling differences
confusionMatrix(as.factor(labels_predicted),as.factor(true_class))
# calculate weights for the test time series
#
weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
for (i in 1:length(labels_predicted)) {
labels_test_predicted  =labels_predicted[i]
sample = as.matrix(data_test[i,])
sample_bag = sax_via_window(sample, w, p, a, "exact", 0.01)
df = data.frame(index = as.numeric(names(sample_bag)), words = unlist(sample_bag))
weighted_patterns = merge(df, tfidf)
specificity = rep(0, length(sample))
for(i in 1:length(weighted_patterns$words)){
pattern = weighted_patterns[i,]
if (labels_test_predicted == 1){x = pattern$class1}
if (labels_test_predicted == 2){x = pattern$class2}
if (labels_test_predicted == 3){x = pattern$class3}
for(j in 1:w){
specificity[pattern$index+j] = specificity[pattern$index+j] + 2*x
-pattern$class1 - pattern$class2 - pattern$class3
}
}
specificity = as.vector(specificity)
weights = rbind(weights, specificity)
}
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
i = 100
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
rm(list = ls())
library(jmotif)
library(caret)
setwd("~/Google Drive/github/data/CMJ/JumpResampled")
train = read.table("JumpResampled_TRAIN", sep =",", header = FALSE, dec =".")
test = read.table("JumpResampled_TEST", sep =",", header = FALSE, dec =".")
labels_train = train[,1];  labels_test = test[,1]
data_train = train[,2:501]; data_test = test[,2:501]
# window 348, PAA 8, alphabet 6,
w <- 348 # the sliding window size
p <- 8  # the PAA size
a <- 6  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has three labels: 1, 2, 3)
#
class1 <- manyseries_to_wordbag(as.matrix(data_train[labels_train == 0,]), w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(as.matrix(data_train[labels_train == 1,]), w, p, a, "exact", 0.01)
class3 <- manyseries_to_wordbag(as.matrix(data_train[labels_train == 2,]), w, p, a, "exact", 0.01)
# compute tf*idf weights for three bags
#
tfidf = bags_to_tfidf(list("class1" = class1, "class2" = class2, "class3" = class3))
edicted labels
#
labels_predicted = rep(-1, length(labels_test))
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(as.matrix(series), w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
# check prediction accuracy: 0.9553
#
true_class = as.numeric(labels_test+1) # fix the labeling differences
confusionMatrix(as.factor(labels_predicted),as.factor(true_class))
# calculate weights for the test time series
#
weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
for (i in 1:length(labels_predicted)) {
labels_test_predicted  =labels_predicted[i]
sample = as.matrix(data_test[i,])
sample_bag = sax_via_window(sample, w, p, a, "exact", 0.01)
df = data.frame(index = as.numeric(names(sample_bag)), words = unlist(sample_bag))
weighted_patterns = merge(df, tfidf)
specificity = rep(0, length(sample))
for(i in 1:length(weighted_patterns$words)){
pattern = weighted_patterns[i,]
if (labels_test_predicted == 1){x = pattern$class1}
if (labels_test_predicted == 2){x = pattern$class2}
if (labels_test_predicted == 3){x = pattern$class3}
for(j in 1:w){
specificity[pattern$index+j] = specificity[pattern$index+j] + 2*x
-pattern$class1 - pattern$class2 - pattern$class3
}
}
specificity = as.vector(specificity)
weights = rbind(weights, specificity)
}
saxvsm_plot = function(weights, labels_predicted, i){
specificity = unlist(weights[i,], use.names = FALSE)
title_text = paste('Pattern of Predicted Class', labels_predicted[i],'; True Class = ', labels_test[i] + 1)
sample = unlist(data_test[i,], use.names = FALSE)
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
}
# plot the weighted patterns
#
i = 100
saxvsm_plot(weights, labels_predicted, i) # return predicted == true class, true class, explanations
rm(list = ls())
library(jmotif)
library(ggplot2)
library(scales)
data("CBF")
str(CBF)
w <- 60 # the sliding window size
p <- 6  # the PAA size
a <- 6  # the SAX alphabet size
# convert the train classes to wordbags (the dataset has three labels: 1, 2, 3)
#
class1 <- manyseries_to_wordbag(CBF[["data_train"]][CBF[["labels_train"]] == 1,], w, p, a, "exact", 0.01)
class2 <- manyseries_to_wordbag(CBF[["data_train"]][CBF[["labels_train"]] == 2,], w, p, a, "exact", 0.01)
class3 <- manyseries_to_wordbag(CBF[["data_train"]][CBF[["labels_train"]] == 3,], w, p, a, "exact", 0.01)
temp = CBF[["data_train"]][CBF[["labels_train"]] == 1,]
# compute tf*idf weights for three bags
#
tfidf = bags_to_tfidf( list("class1" = class1, "class2" = class2, "class3" = class3) )
# predicted labels
#
labels_predicted = rep(-1, length(CBF[["labels_test"]]))
data_test = CBF[["data_test"]]
for (i in c(1:length(data_test[,1]))) {
series = data_test[i,]
bag = series_to_wordbag(series, w, p, a, "exact", 0.01)
cosines = cosine_sim(list("bag"=bag, "tfidf" = tfidf))
labels_predicted[i] = which(cosines$cosines == max(cosines$cosines))
}
weights = data.frame(matrix(nrow = 0, ncol = length(data_test[1,])))
data_test = CBF[["data_test"]]
for (i in 1:length(labels_predicted)) {
labels_test_predicted  =labels_predicted[i]
sample = data_test[i,]
sample_bag = sax_via_window(sample, w, p, a, "exact", 0.01)
df = data.frame(index = as.numeric(names(sample_bag)), words = unlist(sample_bag))
weighted_patterns = merge(df, tfidf)
specificity = rep(0, length(sample))
for(i in 1:length(weighted_patterns$words)){
pattern = weighted_patterns[i,]
if (labels_test_predicted == 1){x = pattern$class1}
if (labels_test_predicted == 2){x = pattern$class2}
if (labels_test_predicted == 3){x = pattern$class3}
for(j in 1:w){
specificity[pattern$index+j] = specificity[pattern$index+j] + 2*x
-pattern$class1 - pattern$class2 - pattern$class3
}
}
specificity = as.vector(specificity)
weights = rbind(weights, specificity)
}
# plot the weighted patterns
# cylinder = 7, bell = 9, funnel = 8
i = 7
specificity = unlist(weights[i,])
predicted_class = labels_predicted[i]
true_class = CBF$labels_test[i]
if (predicted_class == 1) {title_text = "The cylinder class-characteristic pattern example"}
if (predicted_class == 2) {title_text = "The bell class-characteristic pattern example"}
if (predicted_class == 3) {title_text = "The funnel class-characteristic pattern example"}
sample = data_test[i,]
ggplot(data=data.frame(x=c(1:length(sample)), y=sample, col=rescale(specificity)),
aes(x=x,y=y,color=col)) + geom_line(size=1.2) + theme_bw() +
ggtitle(title_text) +
scale_colour_gradientn(name = "Class specificity:  ",limits=c(0,1),
colours=c("darkblue","lightblue","green","yellow",  "red"),
breaks=c(0,0.5,1),labels=c("negative","neutral","high"),
guide = guide_colorbar(title.theme=element_text(size=14, angle=0),title.vjust=1,
barheight=0.6, barwidth=6, label.theme=element_text(size=10, angle=0))) +
theme(legend.position="bottom",plot.title=element_text(size=18),
axis.title.x=element_blank(), axis.title.y=element_blank(),
axis.text.x=element_text(size=12),axis.text.y=element_blank(),
panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
axis.ticks.y = element_blank())
